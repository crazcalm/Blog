<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Crazcalm</title>
    <link>https://crazcalm.github.io/blog/tags/golang/</link>
    <description>Recent content in Golang on Crazcalm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Aug 2018 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://crazcalm.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Embedding to Create a Custom File Server</title>
      <link>https://crazcalm.github.io/blog/post/custom_file_server/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/custom_file_server/</guid>
      <description>What is Embedding? The talk given by Sean Kelly on Embedding is the best resource I have found for explaining it.
In summary, Embedding, in golang, is the rules governing the ability to place one struct or interface within another struct or interface and, from the outer struct or interface, call the exported fields of the inner struct or interface.
In terms of creating a custom file server, why is this important?</description>
    </item>
    
    <item>
      <title>How to Test Environment Variables</title>
      <link>https://crazcalm.github.io/blog/post/test_osgetenv/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/test_osgetenv/</guid>
      <description>Background I recently came across a piece of code that checks for the existence of an environment variable. If the environmental variable exists, the code will use the value of that variable. If it does not exist, the code will return a default value.
Equivalently, this function could of set the environmental value to it&amp;rsquo;s default value and then returned the value of the environmental variable.
func envValue(env, defaultValue string) (result string, err error) { result = os.</description>
    </item>
    
    <item>
      <title>How to Test Panics</title>
      <link>https://crazcalm.github.io/blog/post/test_panics/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/test_panics/</guid>
      <description>Setup Before we can test a panic, we need to have code that panics.
package panic func willPanic() { panic(&amp;quot;Told you I would panic&amp;quot;) }  Testing Given that we know the code will panic, we can do the following:
package panic import ( &amp;quot;testing&amp;quot; ) func TestWillPanic(t *testing.T) { defer func() { if r := recover(); r == nil { t.Errorf(&amp;quot;The code did not panic&amp;quot;) } }() //Call func willPanic() }  In the above, we try to recover and, if the recovery is equal to nil, we marked the test as failed.</description>
    </item>
    
    <item>
      <title>How to modify Golang&#39;s default FileServer to hide dot files</title>
      <link>https://crazcalm.github.io/blog/post/serve-it/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/serve-it/</guid>
      <description>Why? Why do such a thing I have no good reason&amp;hellip; I was poking around in the golang net/http package one night and came across triv.go. Triv.go (triv is short for trivial) is a file filled with trivial server examples.
One of those examples was a file server. When I pointed my browser at that file server, I saw all of my dot files. At the time, I was sharing my home directory, which is filled with dot files.</description>
    </item>
    
    <item>
      <title>Lazy Programming Saves Christmas!</title>
      <link>https://crazcalm.github.io/blog/post/laziness_saves_christmas/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/laziness_saves_christmas/</guid>
      <description>Let&amp;rsquo;s clear the air You may be thinking? &amp;ldquo;How can you be lazy AND still build a Christmas gift?&amp;rdquo;
I know. To truly be lazy around Christmas time is to put in as little effort as possible into buying a gift. My issue with that definition of &amp;ldquo;Lazy&amp;rdquo; is that you have to have money to buy a gift&amp;hellip;
Paint the picture I was in China working for the Peace Corps (AKA NO SALARY!</description>
    </item>
    
    <item>
      <title>Programming Oversight...</title>
      <link>https://crazcalm.github.io/blog/post/programming_oversights/</link>
      <pubDate>Wed, 18 Oct 2017 13:44:46 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/programming_oversights/</guid>
      <description>The Problem I have a horrible memory. If I meet 10 people at a party, I might remember 2 of their names. Recently, I started teaching English in China, and I now have 300+ students. In the spirit of facing my memory problem head on, wrote a programmatic solution.
Flash Cards App I built my own flashcard app! You can find the project on Github at https://github.com/crazcalm/flash-cards. In summary, I used Golang to build a terminal application that reads a csv file and turns that content into flashcards.</description>
    </item>
    
    <item>
      <title>Golang: Using Google&#39;s x packages in China</title>
      <link>https://crazcalm.github.io/blog/post/go_x_packages_in_china/</link>
      <pubDate>Mon, 02 Oct 2017 15:33:17 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/go_x_packages_in_china/</guid>
      <description>The Issue While in China, I do not have access to Google services, websites, or platforms. In terms of being a Golang user, this is annoying because a ton of Golang projects and packages use the x packages, which are a set of Golang packages that were built by Google. These packages are hosted on a Google server, so I end up seeing a lot of this:
$ go get -u github.</description>
    </item>
    
    <item>
      <title>Micro: My New Editor?</title>
      <link>https://crazcalm.github.io/blog/post/learning_micro/</link>
      <pubDate>Fri, 07 Oct 2016 19:03:20 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/learning_micro/</guid>
      <description>Why Learn Micro? I have no good reason as to why someone should learn micro over some other text editor. With that being said, here are some reasons as to why I want to learn how to use this editor.
 It is written in Go.
 I am trying to learn Go, so a text editor written in Go appeals to me.  Writing Go code in it is easy!</description>
    </item>
    
  </channel>
</rss>