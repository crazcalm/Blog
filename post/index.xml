<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Crazcalm</title>
    <link>https://crazcalm.github.io/blog/post/index.xml</link>
    <description>Recent content in Posts on Crazcalm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Oct 2017 13:44:05 +0800</lastBuildDate>
    <atom:link href="https://crazcalm.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Free Windows VMs</title>
      <link>https://crazcalm.github.io/blog/post/windows_vms/</link>
      <pubDate>Sat, 14 Oct 2017 13:44:05 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/windows_vms/</guid>
      <description>

&lt;h2 id=&#34;window-vm-s&#34;&gt;Window VM&amp;rsquo;s&lt;/h2&gt;

&lt;p&gt;As a linux user, I do not have any Windows machines. However, every couple of years I do need the Windows operating system for either testing browser support, making sure my code runs on Windows, etc. And, even though I have downloaded Windows VMs plenty of times, I always forget which website has them. Thus, this blog.&lt;/p&gt;

&lt;h2 id=&#34;microsoft-s-developer-website&#34;&gt;Microsoft&amp;rsquo;s Developer Website&lt;/h2&gt;

&lt;p&gt;The full url is &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&#34;&gt;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;https://crazcalm.github.io/blog/img/windows_vm.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;This website will allow you to download VMs for different versions of the Windows operating systems. Personally, I have only used the virtualbox VMs, but I am sure that the other ones work just as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang: Using Google&#39;s x packages in China</title>
      <link>https://crazcalm.github.io/blog/post/go_x_packages_in_china/</link>
      <pubDate>Mon, 02 Oct 2017 15:33:17 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/go_x_packages_in_china/</guid>
      <description>

&lt;h1 id=&#34;the-issue&#34;&gt;The Issue&lt;/h1&gt;

&lt;p&gt;While in China, I do not have access to Google services, websites, or platforms. In terms of being a Golang user, this is annoying because a ton of Golang projects and packages use the &lt;code&gt;x&lt;/code&gt; packages, which are a set of Golang packages that were built by Google. These packages are hosted on a Google server, so I end up seeing a lot of this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get -u github.com/justjanne/powerline-go

cd /home/crazcalm/.gvm/pkgsets/go1.8.3/global/src/golang.org/x/sys; git pull --ff-only

fatal: unable to access &#39;https://go.googlesource.com/sys/&#39;: Failed to connect to go.googlesource.com port 443: Connection timed out

package golang.org/x/sys/unix: exit status 1

package golang.org/x/text/width: unrecognized import path &amp;quot;golang.org/x/text/width&amp;quot; (https fetch: Get https://golang.org/x/text/width?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-solution&#34;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;All of the &lt;code&gt;x&lt;/code&gt; packages can be found on github. The below links will direct you to the Golang organization page on github (filtered for Go projects):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang?utf8=%E2%9C%93&amp;amp;q=&amp;amp;type=&amp;amp;language=go&#34;&gt;https://github.com/golang?utf8=%E2%9C%93&amp;amp;q=&amp;amp;type=&amp;amp;language=go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once there, you may search for the &lt;code&gt;x&lt;/code&gt; package that you want. The README of each &lt;code&gt;x&lt;/code&gt; package will have instructions on how to manually install the package. In summary, those instructions are to clone the github repo into the following directory on your computer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOPATH/src/golang.org/x/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding a user to your server</title>
      <link>https://crazcalm.github.io/blog/post/adding_user_to_server/</link>
      <pubDate>Sat, 30 Sep 2017 15:30:48 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/adding_user_to_server/</guid>
      <description>

&lt;h1 id=&#34;why-i-am-writing-this-blog&#34;&gt;Why I am writing this blog?&lt;/h1&gt;

&lt;p&gt;I am writing this blog because I a tired of forgetting how to do this. I do not add users to my server very often. As such, every time I do so, I do it incorrectly and the new user is either not in the sudoer group, the user has no home directory, or that user cannot be logged into via ssh.&lt;/p&gt;

&lt;h1 id=&#34;requirements&#34;&gt;Requirements:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Create a new user&lt;/li&gt;
&lt;li&gt;Set a password&lt;/li&gt;
&lt;li&gt;Have a home directory with skeleton files&lt;/li&gt;
&lt;li&gt;Be able to use sudo&lt;/li&gt;
&lt;li&gt;Can use ssh to log in&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;use-the-adduser-command&#34;&gt;Use the &amp;ldquo;adduser&amp;rdquo; command&lt;/h1&gt;

&lt;p&gt;My linux box, running ubuntu, has two commands that can be used to created users; &lt;code&gt;useradd&lt;/code&gt; and &lt;code&gt;adduser&lt;/code&gt;. However, useradd is a low level interface that should never be used by the average person. Thus, we should use the high level interface that is adduser.&lt;/p&gt;

&lt;h2 id=&#34;perks-of-adduser&#34;&gt;Perks of adduser&lt;/h2&gt;

&lt;p&gt;By default, adduser command uses the &lt;code&gt;/etc/adduser.conf&lt;/code&gt;, which creates a home directory for the new user, forces that user to set a password, copies skeleton files into the new directory, and some other things that I do not care too much about.&lt;/p&gt;

&lt;p&gt;Command: &lt;code&gt;adduser &amp;lt;&amp;lt;username&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Skeleton files include files such as .bashrc and .profile.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The skeleton file directory is located: /etc/skel/&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The files in that directory are copied over to the home directory of every new user that is created.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;add-to-sudo-group&#34;&gt;Add to sudo group&lt;/h2&gt;

&lt;p&gt;The adduser command also allows you to add users to the sudo group! The one catch is that the user must already exist. See the below command.&lt;/p&gt;

&lt;p&gt;Command: &lt;code&gt;adduser &amp;lt;&amp;lt;username&amp;gt;&amp;gt; sudo&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;login-via-ssh&#34;&gt;Login via ssh&lt;/h2&gt;

&lt;p&gt;In the home directory of the new user, create a &lt;code&gt;.ssh&lt;/code&gt; directory. Within that directory, create a file called &lt;code&gt;authorized_keys&lt;/code&gt; and add your public ssh rsa key to that file. Once done, test logging into that user:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh &amp;lt;&amp;lt;username&amp;gt;&amp;gt;@ip_address&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Move to China: My Technical Difficulties</title>
      <link>https://crazcalm.github.io/blog/post/move_to_china/</link>
      <pubDate>Thu, 28 Sep 2017 23:29:35 +0800</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/move_to_china/</guid>
      <description>

&lt;h2 id=&#34;what-i-was-prepared-for&#34;&gt;What I was prepared for:&lt;/h2&gt;

&lt;p&gt;When planning a move to China, we all think of the obvious things we will lose the ability to use; All Google products, Facebook, Whats App, Twitter, Instagram, etc. I have known people who have purchased VPNs so that they could continue using those services, but I am not one of those people.&lt;/p&gt;

&lt;h2 id=&#34;what-i-did-not-expect&#34;&gt;What I did not expect:&lt;/h2&gt;

&lt;h3 id=&#34;distance-issues&#34;&gt;Distance issues&lt;/h3&gt;

&lt;p&gt;The biggest issue I have ran into has been the physical distance between China and the Western world. The servers of the websites and services that I use are so far away from me that they are either extremely slow or the connection times out.&lt;/p&gt;

&lt;p&gt;The most annoying case I have had of this was when I was trying to inform my student loan provider that I have joined the Peace Corps by uploading a document to their site. The issue was that I could not get to that portion of their site because it kept timing out.&lt;/p&gt;

&lt;h3 id=&#34;updating-apps&#34;&gt;Updating Apps&lt;/h3&gt;

&lt;p&gt;Before leaving the US, I went in search of a secure messaging app that I could use while abroad. I settled upon Signal, which is an amazing app. I downloading it and made it my default messaging app.&lt;/p&gt;

&lt;p&gt;After living in China for a few months, the app stopped working because my version of the app was out of date. In my mind, out of date means insecure so I understand and applaud them for disabling my old version of the Signal app.&lt;/p&gt;

&lt;p&gt;However, I have no means of updating the app while in China. I cannot use the Google Play store and the Chinese app store that I am using does not have Signal. As a result, I have been forced to give up on using Signal while in China.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Micro: My New Editor?</title>
      <link>https://crazcalm.github.io/blog/post/learning_micro/</link>
      <pubDate>Fri, 07 Oct 2016 19:03:20 -0400</pubDate>
      
      <guid>https://crazcalm.github.io/blog/post/learning_micro/</guid>
      <description>

&lt;h1 id=&#34;why-learn-micro&#34;&gt;Why Learn Micro?&lt;/h1&gt;

&lt;p&gt;I have no good reason as to why someone should learn micro over some other text editor. With that being said, here are some reasons as to why I want to learn how to use this editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is written in Go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am trying to learn Go, so a text editor written in Go appeals to me.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Writing Go code in it is easy!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Micro has builtin features that make writting Go easier such as running go fmt after a file has been saved and showing the lines where compilation errors have occured.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I can run it in my Terminal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A much have! I have a old netbook that I do a lot of programming on and that thing is not powerful enough to run a GUI application.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is still in development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I like the idea of this because it gives me the option of contributing to the project.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;the-basics&#34;&gt;The Basics&lt;/h1&gt;

&lt;h2 id=&#34;command-mode&#34;&gt;Command mode:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Ctrl + e&lt;/code&gt;: Gets you into command mode. This mode is needed for almost everything!&lt;/p&gt;

&lt;h2 id=&#34;the-tutorial&#34;&gt;The Tutorial&lt;/h2&gt;

&lt;p&gt;While in command mode, enter &lt;code&gt;help tutorial&lt;/code&gt;. This document will give you an overview of how micro works and how to customize it.&lt;/p&gt;

&lt;h2 id=&#34;getting-to-the-help-docs&#34;&gt;Getting to the Help Docs&lt;/h2&gt;

&lt;p&gt;While in command mode, enter &lt;code&gt;help&lt;/code&gt;. This is my go to document for finding more details about a micro feature.&lt;/p&gt;

&lt;h2 id=&#34;customizing-the-editor-colors&#34;&gt;Customizing the Editor Colors&lt;/h2&gt;

&lt;p&gt;While in command mode, enter &lt;code&gt;help colors&lt;/code&gt;. This will bring you to a document that will instruct you on how to change the programming syntax colors, editor theme colors, etc.&lt;/p&gt;

&lt;h2 id=&#34;keybidings&#34;&gt;Keybidings&lt;/h2&gt;

&lt;p&gt;I have been using nano for the past 2 years, so vim and emacs keybindings are something I know nothing about.&lt;/p&gt;

&lt;p&gt;To see Micro&amp;rsquo;s default keybindings, type ctlr + e to enter command mode and then type &amp;ldquo;help keybiddings&amp;rdquo;.
This will result in a new horizontal window appearing with the default keybindings.&lt;/p&gt;

&lt;p&gt;Here are a list of some of the key bindings that I find useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + q&lt;/code&gt; = Quit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + o&lt;/code&gt; = Open&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + s&lt;/code&gt; = Save&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + f&lt;/code&gt; = Find&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + n&lt;/code&gt; = Find next&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + p&lt;/code&gt; = Find previous&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + z&lt;/code&gt; = Undo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + y&lt;/code&gt; = Redo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + c&lt;/code&gt; = Copy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x&lt;/code&gt; = Cut&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + k&lt;/code&gt; = Cut line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + v&lt;/code&gt; = Paste&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt; = Select all&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + l&lt;/code&gt; = Jump line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PageUp&lt;/code&gt; = Cusor moves up a full page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PageDown&lt;/code&gt; = Cursor moves down a full page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; = Next split&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + t&lt;/code&gt; = Add a Tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + /&lt;/code&gt; = Next Tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + b&lt;/code&gt; = Shell mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + left/right&lt;/code&gt; = move the cursor a word in that direction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + u&lt;/code&gt; = Toggle Macro (recoding keystrokes?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + j&lt;/code&gt; = Play Macro (play recorded steps)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may create a &lt;code&gt;~/.config/micro/bindings.json&lt;/code&gt; file where you can customize your keybindings.
Examples of this can be found in the keybindings help doc (in command mode run: &lt;code&gt;help keybindings&lt;/code&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>